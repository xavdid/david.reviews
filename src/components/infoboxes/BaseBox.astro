---
import { Image } from "astro:assets";
import { noReview, type Category } from "../../utils/data";
import Rating from "../Rating.astro";
import BookIcon from "../icons/book.astro";
import GameIcon from "../icons/game.astro";
import MovieIcon from "../icons/movie.astro";

type Props = {
  type: Category;
  notes: string;
  rating: number;
  shrinkFooterText?: boolean;
  image: {
    posterUrl: `https://${string}`;
    height: number;
    width: number;
    title: string;
    mediaPermalink: string;
  };
  icons: Array<{
    visible: boolean;
    title: string;
    icon?: string;
  }>;
};

const configs: {
  [type in Props["type"]]: {
    fillColor: `fill-${string}-${number}`;
    borderColor: `border-${string}-${number}`;
    lightEvenColor: `even:bg-${string}-${number}`;
    icon: typeof MovieIcon;
  };
} = {
  movie: {
    fillColor: "fill-red-600",
    borderColor: "border-red-600",
    lightEvenColor: "even:bg-red-50",
    icon: MovieIcon,
  },
  book: {
    fillColor: "fill-emerald-600",
    borderColor: "border-emerald-600",
    lightEvenColor: "even:bg-emerald-50",
    icon: BookIcon,
  },
  game: {
    fillColor: "fill-blue-600",
    borderColor: "border-blue-600",
    lightEvenColor: "even:bg-blue-50",
    icon: GameIcon,
  },
} as const;

const {
  type,
  notes,
  rating,
  shrinkFooterText,
  image,
  icons = [],
} = Astro.props;
const { borderColor, lightEvenColor } = configs[type];

for (const { visible, icon, title } of icons) {
  if (visible && !icon) {
    throw new Error(`Missing an icon for "${title}";`);
  }
}

const verb = ({ game: "plays", movie: "watches", book: "reads" } as const)[
  type
];
---

<div
  class:list={[
    "mb-6 flex rounded border-2",
    borderColor,
    lightEvenColor,
    "even:dark:bg-zinc-700",
  ]}
>
  {/* image column */}
  <div class="p-2">
    <a slot="image" href={image.mediaPermalink}>
      <Image
        class="max-w-[unset]"
        src={image.posterUrl}
        alt={`poster for ${image.title}`}
        height={image.height}
        width={image.width}
      /></a
    >
  </div>

  {/* info column */}
  <div class="flex w-full flex-col justify-between">
    <div>
      {/* title bar area */}
      <div
        class:list={[
          "flex justify-between border-b-2 border-l-2 pl-2",
          borderColor,
        ]}
      >
        {/* title */}
        <span>
          <slot name="title" />
        </span>
        {/* icons */}
        <div class="whitespace-nowrap pl-1">
          {
            icons
              .filter(({ visible }) => visible)
              .map(({ title, icon }) => (
                <div title={title} class="inline cursor-help px-1">
                  {icon}
                </div>
              ))
          }
        </div>
      </div>
      {/* in a div so they're flexed together */}
      <slot name="subtitle" />
    </div>

    {/* body area */}
    <p class="px-4 py-2">
      {notes || <em>{noReview(verb)}</em>}
    </p>
    {/* footer area */}
    <div
      class:list={[
        "flex flex-wrap justify-between border-l-2 border-t-2 px-3",
        borderColor,
        shrinkFooterText && "text-sm md:text-base",
      ]}
    >
      <slot name="footer" />
      <Rating rating={rating} />
    </div>
  </div>
</div>
