---
import { getCollection, type CollectionEntry } from "astro:content";
import RenderedMarkdown from "../../components/RenderedMarkdown.astro";
import CalendarIcon from "../../components/icons/svgs/calendar.svg";
import Layout from "../../layouts/Layout.astro";
import type { ImageInfo } from "../../utils/images";
import { gamePermalink } from "../../utils/data";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import YoutubeEmbed from "../../components/mdx/YoutubeEmbed.astro";
import ReviewSummary from "../../components/mdx/ReviewSummary.astro";
import SteamGame from "../../components/mdx/SteamGame.astro";
import ItchGame from "../../components/mdx/ItchGame.astro";
import Details from "../../components/mdx/Details.astro";
import EmbeddedPlay from "../../components/mdx/EmbeddedPlay.astro";
import Video from "../../components/mdx/Video.astro";

import Config from "../../../astro.config.mjs";
import type { ExternalUrl as AbsoluteUrl } from "../../airtable/types";
import OmniLink from "../../components/links/OmniLink.astro";
import { buildStructuredReview } from "../../utils/structuredData";
import MaybeOmniLink from "../../components/links/MaybeOmniLink.astro";
import { loadGames } from "../../airtable/data/games";
import { getFinishedPlayForGame } from "../../airtable/data/plays";

type Props = { entry: CollectionEntry<"articles"> };
type Params = { slug: CollectionEntry<"articles">["slug"] };
type StaticPaths = Promise<Array<{ params: Params; props: Props }>>;

type Availability = {
  gameTitle: string;
  gameSlug: string;
  links: Array<{ text: string; href?: string }>;
  finishedPlay: boolean;
};

export const getStaticPaths = async (): StaticPaths => {
  const articles = await getCollection("articles");
  return articles.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
};

const { slug } = Astro.params;
const { entry } = Astro.props;
const { Content } = await entry.render();

const frontmatter = entry.data;
let ogImg: ImageInfo | undefined;

// these are used in link building below, so assert assumptions here
if (Config.site?.endsWith("/")) {
  throw new Error("config.site should not end with a slash!");
}

if (!Config.site?.startsWith("https://")) {
  throw new Error("config.site should start with https://");
}

if (frontmatter.ogImg) {
  ogImg = {
    url: `${Config.site}${frontmatter.ogImg.src}` as AbsoluteUrl,
    width: frontmatter.ogImg.width,
    height: frontmatter.ogImg.height,
    type: frontmatter.ogImg.format,
  };
}

let availability: Availability | undefined;

let gameTitle = frontmatter.review?.gameInfo.title;
let gameSlug: string | undefined;

if (!gameTitle) {
  const reviewSteamId = frontmatter.review?.gameInfo.steamId;
  if (reviewSteamId) {
    const games = await loadGames();
    const game = Object.values(games).find(
      ({ steamId }) => steamId === reviewSteamId,
    );
    if (!game) {
      throw new Error(
        `Unable to find game for Steam ID "${reviewSteamId}" and there's no title available`,
      );
    }
    gameTitle = game.title;
    gameSlug = game.slug;
  }
}

if (frontmatter.review) {
  // reviews have gameInfo and/or a steam ID. But, most games have steam IDs, I'll save myself the trouble of including it as an availability source
  if (!gameTitle) {
    throw new Error("no title");
  }

  // these should mostly have slugs? Unless I magic it away with the steam id
  if (!gameSlug) {
    gameSlug = frontmatter.mentionedGameSlugs?.[0];
  }

  // this may not always hold if I have reviews of things that aren't steam games.
  if (!gameSlug) {
    throw new Error("Missing primary game slug for review");
  }

  const play = await getFinishedPlayForGame(gameSlug, {
    throwForMissing: false,
  });

  const o: Availability = {
    gameTitle,
    gameSlug: frontmatter.mentionedGameSlugs?.[0] ?? "",
    links: [],
    finishedPlay: !!play,
  };

  if (frontmatter.review.gameInfo.steamId) {
    o.links.push({
      text: "Steam",
      href: `https://store.steampowered.com/app/${frontmatter.review.gameInfo.steamId}/`,
    });
  }

  o.links.push(...frontmatter.review.gameInfo.availability);

  availability = o;
}

// try to keep this in sync with RenderedMarkdown's h2 styles; wish this could be more programmatic
const h1Styles = [
  "pt-2",
  "text-3xl",
  "md:text-4xl",
  "font-bold",

  // border - this isn't dashed to strengthen it compared to the body
  "border-b",
  "border-blue-600",
  "dark:border-amber-300",
];

// can replace specific markdown components: https://mdxjs.com/table-of-components/
const components = {
  // replacements
  a: OmniLink,

  // custom components - these are each available in MDX without imports
  YoutubeEmbed,
  ReviewSummary,
  SteamGame,
  ItchGame,
  Details,
  EmbeddedPlay,
  SubscribeBlurb,
  Video,
};
---

<!-- articles get a slightly wider layout -->
<Layout
  pageTitle={frontmatter.title}
  pageDescription={frontmatter.ogDesc as `${string}.`}
  activeTab="articles"
  wide
  ogImg={ogImg}
  publishedOn={frontmatter.publishedOn}
  structuredData={frontmatter.review
    ? buildStructuredReview(
        // TODO: change if I write a non-game article
        "VideoGame",
        [
          {
            rating: frontmatter.review.rating,
            dateFinished: frontmatter.publishedOn ?? "",
          },
        ],
        {
          title: frontmatter.review.gameInfo.title,
          articleTitle: frontmatter.title,
          articleSubject: frontmatter.mentionedGameSlugs?.[0]
            ? gamePermalink(frontmatter.mentionedGameSlugs?.[0])
            : undefined,
          blurb: frontmatter.review.blurb,
          permalink: `/articles/${slug}/`,
          poster: frontmatter.ogImg?.src,
        },
      )
    : undefined}
>
  <h1 class:list={h1Styles}>
    {frontmatter.title}
  </h1>

  <p class="pb-4 pt-2">
    <CalendarIcon class:list={["mb-1 inline h-4 pr-2", "dark:fill-white"]} />{
      frontmatter.publishedOn ?? "TBD"
    }
  </p>
  <RenderedMarkdown>
    <!-- https://github.com/withastro/astro/issues/12057 -->
    <Content components={components} />

    {frontmatter.review && <ReviewSummary review={frontmatter.review} />}

    <!-- Text for 1, 2, and 3+ items. -->
    {
      availability && (
        <p class="text-center italic">
          {availability.gameSlug && availability.finishedPlay ? (
            <OmniLink href={gamePermalink(availability.gameSlug)}>
              {availability.gameTitle}
            </OmniLink>
          ) : (
            <span class="font-bold not-italic">{availability.gameTitle}</span>
          )}{" "}
          is avaiable on{" "}
          {availability.links.length === 1 ? (
            <>
              <MaybeOmniLink {...availability.links[0]} />.
            </>
          ) : availability.links.length === 2 ? (
            <>
              <MaybeOmniLink {...availability.links[0]} /> and{" "}
              <MaybeOmniLink {...availability.links[1]} />.
            </>
          ) : (
            <>
              {availability.links.slice(0, -1).map((o) => (
                <>
                  <MaybeOmniLink {...o} />,{" "}
                </>
              ))}
              {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}
              and <MaybeOmniLink {...availability.links.at(-1)!} />.
            </>
          )}
        </p>
      )
    }

    {
      frontmatter.review?.gameInfo.steamId && (
        <SteamGame
          steamId={frontmatter.review.gameInfo.steamId}
          addHr
          showMobileFallback={false}
        />
      )
    }

    {
      frontmatter.review && (
        <>
          <hr />
          <SubscribeBlurb
            classes={["pb-1"]}
            pClasses={["!my-2"]}
            centered
            showSteamButton
            blurb="If you liked this review and want to read more like it, subscribe via"
          />
        </>
      )
    }

    {
      frontmatter?.review?.gotPressKey && (
        <>
          <hr />
          <p>
            <em>
              This review was written using a free code provided by the
              developer/publisher. The free nature of that code didnâ€™t influence
              the conclusions of this review in any way.
            </em>
          </p>
        </>
      )
    }
  </RenderedMarkdown>

  <!-- <hr class="my-6" />
  <p>
    FIXME Mentioned Games: <RoundedLink href="/games/little-kitty-big-city/">
      Beat Breaker
    </RoundedLink>
  </p> -->
</Layout>
