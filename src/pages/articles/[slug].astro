---
import { getCollection, type CollectionEntry } from "astro:content";
import RenderedMarkdown from "../../components/RenderedMarkdown.astro";
import CalendarIcon from "../../components/icons/calendar.astro";
import ExternalLink from "../../components/links/ExternalLink.astro";
import SubtleLink from "../../components/links/SubtleLink.astro";
import Layout from "../../layouts/Layout.astro";
import type { ImageInfo } from "../../utils/images";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import YoutubeEmbed from "../../components/mdx/YoutubeEmbed.astro";
import RoundedLink from "../../components/links/RoundedLink.astro";
import ReviewSummary from "../../components/mdx/ReviewSummary.astro";
import SteamGame from "../../components/mdx/SteamGame.astro";
import Details from "../../components/mdx/Details.astro";

import Config from "../../../astro.config.mjs";
import type { ExternalUrl as AbsoluteUrl } from "../../airtable/types";

type Props = { entry: CollectionEntry<"articles"> };
type Params = { slug: CollectionEntry<"articles">["slug"] };
type StaticPaths = Promise<Array<{ params: Params; props: Props }>>;

export const getStaticPaths = async (): StaticPaths => {
  const articles = await getCollection("articles");
  return articles.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
};

const { entry } = Astro.props;
const { Content } = await entry.render();

const frontmatter = entry.data;
let ogImg: ImageInfo | undefined;

if (Config.site?.endsWith("/")) {
  throw new Error("config.site should not end with a slash!");
}

if (!Config.site?.startsWith("https://")) {
  throw new Error("config.site should start with https://");
}

if (frontmatter.ogImg) {
  ogImg = {
    url: `${Config.site}${frontmatter.ogImg.src}` as AbsoluteUrl,
    width: frontmatter.ogImg.width,
    height: frontmatter.ogImg.height,
    type: frontmatter.ogImg.format,
  };
}

// try to keep this in sync with RenderedMarkdown's h2 styles; wish this could be more programmatic
const h1Styles = [
  "pt-2",
  "text-3xl",
  "md:text-4xl",
  "font-bold",

  // border
  "border-b",
  "border-blue-600",
  "dark:border-amber-300",
];

// can replace specific markdown components: https://mdxjs.com/table-of-components/
// TODO: if I ever need to differentiate between internal and external links in markdown, could do that in a wrapper component
// these are each available in MDX without imports
const components = {
  a: ExternalLink,
  SubtleLink,
  YoutubeEmbed,
  ReviewSummary,
  RoundedLink,
  SteamGame,
  Details,
};
---

<!-- articles get a slightly wider layout -->
<Layout
  pageTitle={frontmatter.title}
  pageDescription={frontmatter.ogDesc as `${string}.`}
  activeTab="articles"
  wide
  ogImg={ogImg}
  publishedOn={frontmatter.publishedOn}
>
  <h1 class:list={h1Styles}>
    {frontmatter.title}
  </h1>

  <p class="pb-4 pt-2">
    <CalendarIcon classes={["inline h-4 mb-1 pr-2", "dark:fill-white"]} />{
      frontmatter.publishedOn ?? "TBD"
    }
  </p>
  <RenderedMarkdown>
    <!-- https://github.com/withastro/astro/issues/12057 -->
    <Content components={components} frontmatter={frontmatter} />

    <!-- could do this, but I like the "buy this on" coming after the blurb and that's hard without putting it in frontmatter -->
    <!-- {frontmatter.review && <ReviewSummary review={frontmatter.review} />} -->

    {frontmatter.steamId && <SteamGame steamId={frontmatter.steamId} />}

    {
      frontmatter.review && (
        <>
          <hr />
          <SubscribeBlurb
            pClasses={["!my-2"]}
            centered
            showSteamButton
            blurb="If you liked this review and want to read more like it, subscribe via"
          />
        </>
      )
    }

    {
      frontmatter?.review?.gotPressKey && (
        <>
          <hr />
          <p>
            <em>
              This review was written using a free code provided by the
              developer/publisher. The free nature of that code didnâ€™t influence
              the conclusions of this review in any way.
            </em>
          </p>
        </>
      )
    }
  </RenderedMarkdown>

  <!-- <hr class="my-6" />
  <p>
    FIXME Mentioned Games: <RoundedLink href="/games/little-kitty-big-city/">
      Beat Breaker
    </RoundedLink>
  </p> -->
</Layout>
