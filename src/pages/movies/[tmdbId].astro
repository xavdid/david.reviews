---
import { Image } from "astro:assets";

import { loadWatches, fields } from "../../airtable/movies";
import Reviewbox from "../../components/infoboxes/reviewbox.astro";
import Layout from "../../layouts/Layout.astro";
import AwardLink, {
  type Props as AwardProps,
} from "../../components/AwardLink.astro";

type Params = {
  tmdbId: string;
};

type Props = {
  title: string;
  posterPath: string;
  collections?: string[];
  award?: AwardProps;
  watches: Array<{
    notes: string;
    watchedOn: string;
    rating: number;
    isFirstWatch: boolean;
  }>;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const rawReviews = await loadWatches();

  const movies = rawReviews.reduce<{ [tmdbId: string]: Props }>(
    (result, review) => {
      const tmdbId = review[fields.tmdbID][0];
      const movie = result[tmdbId];
      const miniReview: Props["watches"][number] = {
        notes: review[fields.notes],
        watchedOn: review[fields.dateWatched],
        rating: review[fields.rating],
        isFirstWatch: review[fields.isFirstWatch] === 1,
      };

      if (movie) {
        movie.watches.push(miniReview);
      } else {
        const item: Props = {
          title: review[fields.title],
          posterPath: review[fields.posterPath],
          collections: review[fields.collections],
          watches: [miniReview],
        };

        if (review[fields.awardTier]) {
          item.award = {
            // this gets validated below
            tier: review[fields.awardTier]![0],
            year: review[fields.awardYear]![0],
            anchor: review[fields.awardAnchor]?.[0],
          };
        }

        result[tmdbId] = item;
      }

      return result;
    },
    {},
  );

  return Object.entries(movies).map(([tmdbId, props]) => ({
    params: { tmdbId },
    props,
  }));
};

const { title, watches, posterPath, award, collections } = Astro.props;
if (Boolean(award?.tier) != Boolean(award?.year)) {
  throw new Error(
    `Single movie page for "${title}" has only one of Award yier & tier.`,
  );
}
---

<Layout title={title} active="movies">
  <div class="flex py-3">
    <Image
      src={`https://image.tmdb.org/t/p/w300${posterPath}`}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl">{title}</h1>
      <p class="">
        I've watched this {watches.length} time{watches.length > 1 && "s"} and
        given it an average score of {
          watches.reduce((total, { rating }) => rating + total, 0) /
            watches.length
        } (<a
          class="text-blue-500 underline hover:text-blue-600"
          target="_blank"
          rel="noopener"
          href="https://xavd.id/blog/post/on-the-rating-of-media/">out of 4</a
        >).
      </p>
      {award && <AwardLink {...award} />}
      {
        collections && (
          <div class="py-2">
            <p>This movie is part of the following collection(s):</p>
            <ul class="pt-2">
              {collections.map((collection) => (
                <li class="pb-2 pl-2">
                  <a
                    class="rounded bg-blue-200 p-1 hover:bg-blue-300"
                    href="TKTK"
                  >
                    {collection}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </div>
  <div>
    {
      watches.map((watch, index) => (
        <Reviewbox {...watch} watchNumber={watches.length - index} />
      ))
    }
  </div>
</Layout>
