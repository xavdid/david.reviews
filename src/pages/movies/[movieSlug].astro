---
import { Image } from "astro:assets";

import type { Movie } from "../../airtable/data/movies";
import { loadWatches, type Watch } from "../../airtable/data/watches";
import AwardBlurb from "../../components/AwardBlurb.astro";
import OmniLink from "../../components/links/OmniLink.astro";
import MediaTitle from "../../components/MediaTitle.astro";
import Rating from "../../components/Rating.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import Layout from "../../layouts/Layout.astro";
import {
  averageRating,
  buildSeoDescription,
  maxIsoDate,
  noReview,
  pluralize,
  ratingPage,
  seoTitle,
} from "../../utils/data";
import { buildStructuredReview } from "../../utils/structuredData";

type Params = {
  movieSlug: string;
};

type Props = {
  movie: Movie;
  watches: Watch[];
  publishedOn: string;
  updatedOn?: string;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const watches = await loadWatches();

  const movies = watches.reduce<Record<string, Props>>((result, watch) => {
    const tmdbId = watch.movie.tmdbId;

    result[tmdbId] ||= {
      movie: watch.movie,
      watches: [],
      publishedOn: "",
    };
    result[tmdbId].watches.push(watch);

    if (watch.isFirstWatch) {
      result[tmdbId].publishedOn = watch.dateFinished;
    } else {
      // set the updated date to the max of current value and the new one, defaulting to the new one if nothing is set
      result[tmdbId].updatedOn = maxIsoDate(
        result[tmdbId].updatedOn,
        watch.dateFinished,
      );
    }

    return result;
  }, {});

  return Object.entries(movies).map(([_, props]) => ({
    params: { movieSlug: props.movie.slug },
    props,
  }));
};

const {
  watches,
  movie: {
    title,
    posterUrl,
    bigPosterUrl,
    award,
    collections,
    yearReleased,
    numWatches,
    permalink,
  },
  publishedOn,
  updatedOn,
} = Astro.props;
---

<Layout
  pageTitle={`${title} - Movies`}
  pageDescription={`David shares thoughts about the ${
    watches.length
  } ${pluralize(watches, "time")} he's watched ${title}.`}
  seoTitle={seoTitle(title)}
  seoDescription={buildSeoDescription(watches, "watches")}
  activeTab="movies"
  ogImg={{
    url: bigPosterUrl,
    height: 750,
    width: 500,
    type: "jpeg",
  }}
  publishedOn={publishedOn}
  updatedOn={updatedOn}
  structuredData={buildStructuredReview("Movie", watches, {
    title,
    permalink,
    poster: bigPosterUrl,
  })}
>
  <div class="flex py-3">
    <Image
      src={posterUrl}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="h-fit"
    />
    <div class="pl-3">
      <MediaTitle>{title}</MediaTitle>
      <p class="pt-2">
        Originally released in {yearReleased}.
      </p>
      <p class="pr-2 pt-2">
        I've watched this movie {watches.length}
        {pluralize(watches, "time")} and given it an average score of {
          averageRating(watches)
        }‚≠ê (<OmniLink href={ratingPage("movies")}>
          {"out of 4"}
        </OmniLink>).
      </p>
      {
        award && (
          <div class="pt-2">
            <AwardBlurb {...award} category="movie" />
          </div>
        )
      }
      {
        collections && (
          <div class="pt-2">
            <p>
              This movie is part of the following{" "}
              {pluralize(collections, "collection")}:
            </p>
            <ul class="pt-2">
              {collections.map((collection) => (
                <li class="pb-2 pl-4">
                  <OmniLink href={collection.permalink}>
                    {collection.fullName}
                  </OmniLink>
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </div>
  <div>
    {
      watches.map(
        (
          { dateFinished, rating, notes, isFirstWatch, watchedInTheater },
          index,
        ) => {
          const watchNumber = numWatches - index;
          const notActuallyFirstWatch = watchNumber === 1 && !isFirstWatch;

          return (
            <div
              id={dateFinished}
              class="mb-4 rounded border-2 border-red-600 even:bg-red-50 dark:even:bg-zinc-700"
            >
              <div class="flex justify-between border-b-2 border-red-600 px-2">
                <span>{dateFinished}</span>
                <span>
                  Watch #{watchNumber}
                  {notActuallyFirstWatch && "*"}
                </span>
                <div>
                  <Rating rating={rating} />
                </div>
              </div>
              <p class="p-2">{notes || <em>{noReview("watches")}</em>}</p>
              {watchedInTheater && <p class="p-2">üçø Watched in a theater.</p>}
            </div>
          );
        },
      )
    }
  </div>

  {
    !watches[watches.length - 1].isFirstWatch && (
      <p class="pb-4">
        * this is my first <em>logged</em> watch, but I had seen the movie
        before.
      </p>
    )
  }

  <SubscribeBlurb mediaType="movie" centered />
</Layout>
