---
import { Image } from "astro:assets";

import type { Movie } from "../../airtable/data/movies";
import { loadWatches, type Watch } from "../../airtable/data/watches";
import AwardBlurb from "../../components/AwardBlurb.astro";
import Rating from "../../components/Rating.astro";
import Layout from "../../layouts/Layout.astro";
import { collectionPermalink, seoTitle } from "../../utils";
import ExternalLink from "../../components/links/ExternalLink.astro";
import RoundedLink from "../../components/links/RoundedLink.astro";

type Params = {
  movieSlug: string;
};

type Props = {
  movie: Movie;
  watches: Watch[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const watches = await loadWatches();

  const movies = watches.reduce<Record<string, Props>>((result, watch) => {
    const tmdbId = watch.movie.tmdbId;
    const movieRecord = result[tmdbId] as Props | undefined;

    if (movieRecord) {
      movieRecord.watches.push(watch);
    } else {
      const item: Props = {
        movie: watch.movie,
        watches: [watch],
      };
      result[tmdbId] = item;
    }

    return result;
  }, {});

  return Object.entries(movies).map(([_, props]) => ({
    params: { movieSlug: props.movie.slug },
    props,
  }));
};

const {
  watches,
  movie: { title, posterUrl, award, collections, yearReleased, numWatches },
} = Astro.props;
---

<Layout
  pageTitle={`${title} - Movies`}
  seoTitle={seoTitle(title)}
  seoDescription={`David shares thoughts about the ${watches.length} time${
    watches.length > 1 ? "s" : ""
  } he's watched ${title}.`}
  activeTab="movies"
>
  <div class="flex py-3">
    <Image
      src={posterUrl}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl">{title}</h1>
      <p class="pt-2">
        Originally released in {yearReleased}.
      </p>
      <p class="pr-2 pt-2">
        I've watched this movie {watches.length} time{watches.length > 1 && "s"}
         and given it an average score of {
          watches.reduce((total, { rating }) => rating + total, 0) /
            watches.length
        } (<ExternalLink
          href="https://xavd.id/blog/post/on-the-rating-of-media/"
        >
          {"out of 4"}
        </ExternalLink>).
      </p>
      {award && <AwardBlurb {...award} />}
      {
        collections && (
          <div class="py-2">
            <p>
              This movie is part of the following collection
              {collections.length > 1 && "s"} :
            </p>
            <ul class="pt-2">
              {collections.map((collection) => (
                <li class="pb-2 pl-4">
                  <RoundedLink href={collectionPermalink(collection.slug)}>
                    {collection.fullName}
                  </RoundedLink>
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </div>
  <div>
    {
      watches.map(({ dateWatched, rating, notes, isFirstWatch }, index) => {
        const watchNumber = numWatches - index;
        const notActuallyFirstWatch = watchNumber === 1 && !isFirstWatch;

        return (
          <div class="mb-4 rounded border-2 border-red-600 even:bg-red-50">
            <div class="flex justify-between border-b-2 border-red-600 px-2">
              <span>{dateWatched}</span>
              <span>
                Watch #{watchNumber}
                {notActuallyFirstWatch && "*"}
              </span>
              <div>
                <Rating rating={rating} />
              </div>
            </div>
            <p class="p-2">{notes || <em>no review</em>}</p>
          </div>
        );
      })
    }
  </div>

  {
    !watches[watches.length - 1].isFirstWatch && (
      <p>
        * this is my first <em>logged</em> watch, but I had seen the movie
        before.
      </p>
    )
  }
</Layout>
