---
import { loadWatches, type Watch } from "../../airtable/data/watches";
import ButtonGroup from "../../components/ButtonGroup.astro";
import MovieLegend from "../../components/MovieLegend.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import WatchBox from "../../components/infoboxes/WatchBox.astro";
import Layout from "../../layouts/Layout.astro";
import { seoTitle } from "../../utils";

type Subpaths = "awarded" | "all" | "recommended" | "recent" | "unrecommended";
type WatchFilter = (W: { watch: Watch; numWatch: number }) => boolean;
const DEFAULT_FILTER: WatchFilter = () => true;

// this controls the /movies and /movies/... routes
type Result = Array<{ params: { slug: Subpaths | undefined } }>;
export const getStaticPaths = (): Result =>
  (
    [undefined, "all", "awarded", "recommended", "unrecommended"] as Subpaths[]
  ).map((slug: Subpaths | undefined) => ({
    params: { slug },
  }));

const subPages: Array<{
  buttonLabel: string;
  pageTitle: string;
  tabTitle: string;
  limit?: number;
  filter?: WatchFilter;
  subpath: Subpaths | null;
  introText?: `${string}.` | `${string}!`;
}> = [
  {
    subpath: "all",
    buttonLabel: "All",
    tabTitle: "All Reviews",
    pageTitle: "Every Reviewed Movie",
  },
  {
    subpath: null,
    buttonLabel: "Recent",
    pageTitle: "Recently Reviewed Movies",
    tabTitle: "Recent Movies",
    limit: 100,
    introText: "Showing the 100 most recent reviews.",
  },
  {
    subpath: "awarded",
    buttonLabel: "🥇🥈🥉",
    tabTitle: "Awarded Movies",
    pageTitle: "Every Favorite-of-the-Year Honoree",
    introText:
      "Showing reviews of movies that were one of my favorite things I watched that year.",
    filter: ({ watch }) => !!watch.movie.award,
  },
  {
    subpath: "recommended",
    buttonLabel: "👍",
    tabTitle: "Recommended Movies",
    pageTitle: "All Recommended Movies",
    introText:
      "Showing reviews of movies that I broadly recommend. Those I've seen a bunch may not have text reviews.",
    filter: ({ watch }) => watch.rating >= 3,
  },
  {
    subpath: "unrecommended",
    buttonLabel: "👎",
    tabTitle: "Unrecommended Movies",
    pageTitle: "All Unrecommended Movies",
    introText:
      "Showing reviews of movies you should avoid unless you're a big fan of the genre or like watching bad movies (like I do).",
    filter: ({ watch }) => watch.rating < 3,
  },
];

const slug = Astro.params.slug ?? null;

const {
  filter = DEFAULT_FILTER,
  limit = undefined,
  pageTitle,
  tabTitle = "",
  introText,
} = subPages.find(({ subpath: subpageSlug }) => subpageSlug === slug) ?? {};
if (!pageTitle) {
  throw new Error(`Unable to find page details for slug "${slug}"`);
}

const watches = await loadWatches();
const watchCounts: Record<string, number> = {};

const watchesWithCounts = watches.map((watch) => {
  const thisWatchNum = watchCounts[watch.movie.tmdbId] ?? 0;
  watchCounts[watch.movie.tmdbId] = thisWatchNum + 1;
  return {
    watch,
    numWatch: watch.movie.numWatches - thisWatchNum,
  };
});
const filteredWatches = watchesWithCounts.filter(filter).slice(0, limit);
const collectionEmoji = new Set<string>(
  watches
    .map((w) => w.movie.collections?.map((c) => c.emoji))
    .flat()
    .filter(Boolean) as string[],
);
---

<Layout
  pageTitle={tabTitle}
  seoTitle={seoTitle("Movies!")}
  seoDescription={`David shares thoughts about the ${
    Object.keys(watchCounts).length
  } movies he's watched.`}
  activeTab="movies"
>
  <h1 class="pb-3 pt-2 text-2xl">{pageTitle}</h1>
  <!-- fixed-height box so content doesn't jump around -->
  <!-- <p class="min-h-[5rem]"> -->
  <p class="mb-2">
    {
      slug === "all"
        ? `Showing every single review (${filteredWatches.length} reviews for ${
            Object.keys(watchCounts).length
          } movies).`
        : introText
    }
  </p>
  <SubscribeBlurb mediaType="movie" />

  <ButtonGroup
    pathRoot="movies"
    currentSubpath={slug ?? null}
    buttons={subPages.map(({ buttonLabel: label, subpath }) => ({
      subpath,
      label,
    }))}
  />

  <MovieLegend collectionEmoji={collectionEmoji} />
  <div>
    {
      filteredWatches.map(({ watch, numWatch }) => (
        <WatchBox watch={watch} numWatch={numWatch} />
      ))
    }
  </div>
</Layout>
