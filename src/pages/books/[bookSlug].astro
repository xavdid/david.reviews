---
import { Image } from "astro:assets";

import type { Book } from "../../airtable/data/books";
import { loadReads, type Read } from "../../airtable/data/reads";
import AuthorList from "../../components/AuthorList.astro";
import AwardBlurb from "../../components/AwardBlurb.astro";
import Rating from "../../components/Rating.astro";
import ExternalLink from "../../components/links/ExternalLink.astro";
import Layout from "../../layouts/Layout.astro";
import { seriesPermalnk } from "../../utils";

type Params = {
  bookSlug: string;
};

type Props = Book & {
  reads: Read[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const books = reads.reduce<Record<string, Props>>((result, read) => {
    const gbid = read.book.gbid;
    const bookRecord = result[gbid] as Props | undefined;

    if (bookRecord) {
      bookRecord.reads.push(read);
    } else {
      const item: Props = {
        ...read.book,
        reads: [read],
      };
      result[gbid] = item;
    }

    return result;
  }, {});

  return Object.values(books).map((props) => ({
    params: { bookSlug: props.slug },
    props,
  }));
};

const { name, reads, series, award, authors, gbid, numberInSeries } =
  Astro.props;
---

<Layout title={name} active="books">
  <div class="flex py-3">
    <Image
      src={`https://books.google.com/books/content/images/frontcover/${gbid}?fife=h225`}
      alt={`poster for ${name}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl">{name}</h1>
      <p class="pb-2">
        by <AuthorList authors={authors} style="rounded" />
      </p>
      <p class="pb-2">
        I've read this {reads.length} time{reads.length > 1 && "s"} and given it
        an average score of {
          reads.reduce((total, { rating }) => rating + total, 0) / reads.length
        }
         (<!-- prettier-ignore -->
        <ExternalLink href="https://xavd.id/blog/post/on-the-rating-of-media/">out of 4</ExternalLink>).
      </p>
      {
        series && (
          <div class="py-2">
            <p>
              This is book #{numberInSeries} in the
              <a
                class="rounded bg-blue-200 p-1 hover:bg-blue-300"
                href={seriesPermalnk(series.slug)}
              >
                {series.name}
              </a>{" "}
              series.
            </p>
          </div>
        )
      }
      {award && <AwardBlurb {...award} />}
    </div>
  </div>
  <div>
    {
      reads.map(({ rating, medium, notes, dateFinished }) => (
        <div class="mb-4 rounded border-2 border-emerald-600 even:bg-emerald-50">
          <div class="flex justify-between border-b-2 border-emerald-600 px-2">
            <span>{dateFinished}</span>
            {medium === "Audio" && <span>ðŸ”ˆ Audiobook</span>}
            <div>
              <Rating rating={rating} />
            </div>
          </div>
          <p class="p-2">{notes || <em>no review</em>}</p>
        </div>
      ))
    }
  </div>
</Layout>
