---
import slugify from "@sindresorhus/slugify";
import { Image } from "astro:assets";

import { fields, loadReads, type BookMedium } from "../../airtable/reads";
import AwardBlurb, {
  type Props as AwardProps,
} from "../../components/AwardBlurb.astro";
import Rating from "../../components/Rating.astro";
import Layout from "../../layouts/Layout.astro";
import { seriesPermalnk } from "../../utils";
import ExternalLink from "../../components/links/ExternalLink.astro";
import AuthorList from "../../components/AuthorList.astro";

type SeriesInfo = {
  name: string;
  number: number;
};

type Params = {
  bookSlug: string;
};

type Props = {
  title: string;
  award?: AwardProps;
  gbid: string;
  authors: string[];
  series?: SeriesInfo;
  reads: Array<{
    notes: string;
    dateFinished: string;
    rating: number;
    isReread: boolean;
    bookMedium: BookMedium;
  }>;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const rawReviews = await loadReads();

  const books = rawReviews.reduce<{ [gbid: string]: Props }>(
    (result, review) => {
      const gbid = review[fields.googleBooksId]![0];
      const book = result[gbid];
      const miniReview: Props["reads"][number] = {
        notes: review[fields.notes],
        dateFinished: review[fields.dateFinished],
        rating: review[fields.rating],
        isReread: review[fields.isReread],
        bookMedium: review[fields.medium],
      };

      if (book) {
        book.reads.push(miniReview);
      } else {
        const item: Props = {
          title: review[fields.title][0],
          gbid,
          authors: review[fields.authorFullNames].split(","),
          reads: [miniReview],
        };

        if (review[fields.seriesName]) {
          item.series = {
            name: review[fields.seriesName]![0],
            number: review[fields.numberInSeries]![0],
          };
        }

        if (review[fields.awardTier]) {
          item.award = {
            // this gets validated below
            tier: review[fields.awardTier]![0],
            year: review[fields.awardYear]![0],
            anchor: review[fields.awardAnchor]?.[0],
          };
        }

        result[gbid] = item;
      }

      return result;
    },
    {},
  );

  return Object.values(books).map((props) => ({
    params: { bookSlug: slugify(props.title) },
    props,
  }));
};

const { title, reads, series, award, authors, gbid } = Astro.props;
---

<Layout title={title} active="books">
  <div class="flex py-3">
    <Image
      src={`https://books.google.com/books/content/images/frontcover/${gbid}?fife=h225`}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl">{title}</h1>
      <p class="pb-2">
        by <AuthorList authors={authors} style="rounded" />
      </p>
      <p class="pb-2">
        I've read this {reads.length} time{reads.length > 1 && "s"} and given it
        an average score of {
          reads.reduce((total, { rating }) => rating + total, 0) / reads.length
        }
         (<!-- prettier-ignore -->
        <ExternalLink href="https://xavd.id/blog/post/on-the-rating-of-media/">out of 4</ExternalLink>).
      </p>
      {
        series && (
          <div class="py-2">
            <p>
              This is book #{series.number} in the
              <a
                class="rounded bg-blue-200 p-1 hover:bg-blue-300"
                href={seriesPermalnk(series.name)}
              >
                {series.name}
              </a>{" "}
              series.
            </p>
          </div>
        )
      }
      {award && <AwardBlurb {...award} />}
    </div>
  </div>
  <div>
    {
      reads.map(({ rating, bookMedium, notes, dateFinished }) => (
        <div class="mb-4 rounded border-2 border-emerald-600 even:bg-emerald-50">
          <div class="flex justify-between border-b-2 border-emerald-600 px-2">
            <span>{dateFinished}</span>
            {bookMedium === "Audio" && <span>ðŸ”ˆ Audiobook</span>}
            <div>
              <Rating rating={rating} />
            </div>
          </div>
          <p class="p-2">{notes || <em>no review</em>}</p>
        </div>
      ))
    }
  </div>
</Layout>
