---
import { Image } from "astro:assets";

import { type Book, posterUrlForHeight } from "../../airtable/data/books";
import { loadReads, type Read } from "../../airtable/data/reads";
import AuthorList from "../../components/AuthorList.astro";
import AwardBlurb from "../../components/AwardBlurb.astro";
import OmniLink from "../../components/links/OmniLink.astro";
import MediaTitle from "../../components/MediaTitle.astro";
import Rating from "../../components/Rating.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import Layout from "../../layouts/Layout.astro";
import {
  buildSeoDescription,
  maxIsoDate,
  noReview,
  pluralize,
  ratingPage,
  seoTitle,
} from "../../utils/data";
import { buildStructuredReview } from "../../utils/structuredData";
import MultiLineText from "../../components/MultiLineText.astro";

type Params = {
  bookSlug: string;
};

type Props = Book & {
  reads: Read[];
  publishedOn: string;
  updatedOn?: string;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const books = reads.reduce<Record<string, Props>>((result, read) => {
    const gbid = read.book.gbid;

    result[gbid] ||= {
      ...read.book,
      reads: [],
      publishedOn: "",
    };
    result[gbid].reads.push(read);

    if (read.isReread) {
      result[gbid].updatedOn = maxIsoDate(
        result[gbid].updatedOn,
        read.dateFinished,
      );
    } else {
      result[gbid].publishedOn = read.dateFinished;
    }

    return result;
  }, {});

  return Object.values(books).map((props) => ({
    params: { bookSlug: props.slug },
    props,
  }));
};

const {
  title,
  reads,
  series,
  award,
  gbid,
  authors,
  numberInSeries,
  publishedOn,
  updatedOn,
  permalink,
} = Astro.props;

const authorsStr = authors.map((a) => a.name).join(", ");
---

<Layout
  pageTitle={`${title} - Books`}
  pageDescription={`David shares thoughts about the ${reads.length} ${pluralize(
    reads,
    "time",
  )} he's read ${title}, by ${authorsStr}.`}
  seoTitle={seoTitle(`${title}, by ${authorsStr}`)}
  seoDescription={buildSeoDescription(reads, "reads")}
  activeTab="books"
  ogImg={{
    url: posterUrlForHeight(gbid, 700),
    height: 700,
    width: 461,
    type: "jpeg",
  }}
  publishedOn={publishedOn}
  updatedOn={updatedOn}
  structuredData={buildStructuredReview("Book", reads, {
    title,
    permalink,
    poster: posterUrlForHeight(gbid, 700),
    authors,
  })}
>
  <div class="flex py-3">
    <Image
      src={posterUrlForHeight(gbid, 225)}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="h-fit"
    />
    <div class="pl-3">
      <MediaTitle classes={["underline"]}>{title}</MediaTitle>
      <p class="py-2 pb-4">
        by <AuthorList authors={authors} style="rounded" />
      </p>
      <p class="pb-2">
        I've read this book {reads.length}
        {pluralize(reads, "time")} and given it an average score of {
          reads.reduce((total, { rating }) => rating + total, 0) / reads.length
        }
         (<OmniLink href={`${ratingPage("books")}`}>
          {"out of 4"}
        </OmniLink>).
      </p>
      {
        series && (
          <div class="py-2">
            <p>
              This is book #{numberInSeries} in the
              <OmniLink href={series.permalink}>{series.name}</OmniLink> series.
            </p>
          </div>
        )
      }
      {award && <AwardBlurb {...award} category="book" />}
    </div>
  </div>

  {
    reads.map(({ rating, medium, notes, dateFinished }) => (
      <div
        id={dateFinished}
        class="mb-4 rounded-sm border-2 border-emerald-600 even:bg-emerald-50 dark:even:bg-zinc-700"
      >
        <div class="flex justify-between border-b-2 border-emerald-600 px-2">
          <span>{dateFinished}</span>
          {medium === "Audio" && <span>ðŸ”ˆ Audiobook</span>}
          <div>
            <Rating rating={rating} />
          </div>
        </div>
        <div class="p-2">
          {notes ? (
            <MultiLineText text={notes} />
          ) : (
            <em>{noReview("reads")}</em>
          )}
        </div>
      </div>
    ))
  }

  <SubscribeBlurb centered mediaType="book" />
</Layout>
