---
import type { Author } from "../../../airtable/data/authors";
import { loadReads, type Read } from "../../../airtable/data/reads";
import BookLegend from "../../../components/BookLegend.astro";
import ReadBox from "../../../components/infoboxes/ReadBox.astro";
import Layout from "../../../layouts/Layout.astro";

type Params = {
  authorSlug: string;
};

type Props = Author & {
  reads: Read[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const authors = reads.reduce<{ [authorId: string]: Props }>(
    (result, read) => {
      read.book.authors.forEach((author) => {
        const authorId = author.recordId;
        const authorRecord = result[authorId];

        if (authorRecord) {
          authorRecord.reads.push(read);
        } else {
          result[authorId] = {
            ...author,
            reads: [read],
          };
        }
      });
      return result;
    },
    {},
  );

  return Object.entries(authors).map(([_, props]) => ({
    params: { authorSlug: props.slug },
    props,
  }));
};

const { reads, name, recordId: authorId } = Astro.props;
const numUniqueBooks = new Set(reads.map((r) => r.book.gbid)).size;
---

<Layout title={`${name} - Reviews`} active="books">
  <h1 class="pb-3 pt-2 text-2xl">
    Reviews for {name}
  </h1>
  <p class="pb-3">
    There are {reads.length} total reviews of {numUniqueBooks} book{
      reads.length > 1 && "s"
    } by {name}.
  </p>
  <BookLegend />
  <div>
    {reads.map((read) => <ReadBox read={read} omitAuthorIds={[authorId]} />)}
  </div>
</Layout>
