---
import { loadReads, fields, type ReadRecord } from "../../../airtable/books";
import BookBox from "../../../components/infoboxes/bookbox.astro";
import Layout from "../../../layouts/Layout.astro";
import slugify from "@sindresorhus/slugify";

type Params = {
  authorSlug: string;
};

type Props = {
  name: string;
  reads: ReadRecord[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const rawReviews = await loadReads();

  const authors = rawReviews.reduce<{ [authorId: string]: Props }>(
    (result, review) => {
      review[fields.authorIds].forEach((authorId, authorIndex) => {
        const author = result[authorId];
        if (author) {
          author.reads.push(review);
        } else {
          result[authorId] = {
            name: review[fields.authorFullNames].split(",")[authorIndex],
            reads: [review],
          };
        }
      });
      return result;
    },
    {},
  );

  return Object.entries(authors).map(([_, props]) => ({
    params: { authorSlug: slugify(props.name) },
    props,
  }));
};

const { reads, name } = Astro.props;
const numUniqueBooks = new Set(reads.map((r) => r[fields.googleBooksId])).size;
---

<Layout title={`${name} - Reviews`} active="books">
  <h1 class="pb-3 pt-2 text-2xl">
    Reviews for {name}
  </h1>
  <p class="pb-3">
    There are {reads.length} total reviews of {numUniqueBooks} book{
      reads.length > 1 && "s"
    } by {name}.
  </p>
  <ul class="mb-4 rounded bg-emerald-50 p-2">
    <li>🔈 - Audiobook</li>
    <li>🔁 - Re-read</li>
    <li>
      🥇 / 🥈 / 🥉 - <a
        href="https://xavd.id/blog/tags/yearly-review"
        class="rounded bg-blue-200 p-1 hover:bg-blue-300"
        >Favorite of the Year</a
      > honoree
    </li>
  </ul>
  <div>
    {
      reads.map((review) => (
        <BookBox
          title={review[fields.title][0]}
          rating={review[fields.rating]}
          dateFinished={review[fields.dateFinished]}
          notes={review[fields.notes]}
          isReread={review[fields.isReread]}
          googleBooksId={review[fields.googleBooksId]![0]}
          awardTier={review[fields.awardTier]?.[0]}
          bookMedium={review[fields.medium]}
          series={
            review[fields.seriesName]?.[0]
              ? {
                  name: review[fields.seriesName]![0],
                  number: review[fields.numberInSeries]![0],
                }
              : undefined
          }
          coAuthors={
            review[fields.authorIds].length
              ? review[fields.authorFullNames]
                  .split(",")
                  .filter((n) => n != name)
                  .join(", ")
              : undefined
          }
        />
      ))
    }
  </div>
</Layout>
