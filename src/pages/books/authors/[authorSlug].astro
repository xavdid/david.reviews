---
import type { Author } from "../../../airtable/data/authors";
import { loadReads, type Read } from "../../../airtable/data/reads";
import BookLegend from "../../../components/BookLegend.astro";
import PageTitle from "../../../components/PageTitle.astro";
import RoundedText from "../../../components/RoundedText.astro";
import ReadBox from "../../../components/infoboxes/ReadBox.astro";
import Layout from "../../../layouts/Layout.astro";
import { averageRating, pluralize, seoTitle } from "../../../utils/data";

type Params = {
  authorSlug: string;
};

type Props = Author & {
  reads: Read[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const authors = reads.reduce<Record<string, Props>>((result, read) => {
    read.book.authors.forEach((author) => {
      const authorId = author.recordId;

      result[authorId] ||= {
        ...author,
        reads: [],
      };

      result[authorId].reads.push(read);
    });
    return result;
  }, {});

  return Object.entries(authors).map(([_, props]) => ({
    params: { authorSlug: props.slug },
    props,
  }));
};

const { reads, name, recordId: authorId } = Astro.props;
const numUniqueBooks = new Set(reads.map((r) => r.book.gbid)).size;
---

<Layout
  pageTitle={`${name} - Books`}
  seoTitle={seoTitle(`Books by ${name}`)}
  seoDescription={`David shares thoughts about the ${numUniqueBooks} book${pluralize(
    numUniqueBooks,
  )} he's read by ${name}.`}
  activeTab="books"
>
  <PageTitle>
    Reviews for <RoundedText text={name} />
  </PageTitle>
  <p class="pb-3">
    There {reads.length > 1 ? "are" : "is"}{" "}
    {reads.length} review{pluralize(reads)} of {numUniqueBooks}
     book{pluralize(numUniqueBooks)}. They have an average score of {
      averageRating(reads)
    }/4.
  </p>
  <BookLegend />
  <div>
    {reads.map((read) => <ReadBox read={read} omitAuthorIds={[authorId]} />)}
  </div>
</Layout>
