---
import type { Author } from "../../../airtable/data/authors";
import { loadReads, type Read } from "../../../airtable/data/reads";
import BookLegend from "../../../components/BookLegend.astro";
import PageTitle from "../../../components/PageTitle.astro";
import RoundedText from "../../../components/RoundedText.astro";
import SubscribeBlurb from "../../../components/SubscribeBlurb.astro";
import ReadBox from "../../../components/infoboxes/ReadBox.astro";
import OmniLink from "../../../components/links/OmniLink.astro";
import Layout from "../../../layouts/Layout.astro";
import {
  averageRating,
  maxIsoDate,
  pluralize,
  ratingPage,
  seoTitle,
} from "../../../utils/data";

type Params = {
  authorSlug: string;
};

type Props = Author & {
  reads: Read[];
  publishedOn: string;
  updatedOn?: string;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const authors = reads.reduce<Record<string, Props>>((result, read) => {
    read.book.authors.forEach((author) => {
      const authorId = author.recordId;

      result[authorId] ||= {
        ...author,
        reads: [],
        publishedOn: "",
      };

      result[authorId].reads.push(read);

      if (read.isReread) {
        result[authorId].updatedOn = maxIsoDate(
          result[authorId].updatedOn,
          read.dateFinished,
        );
      } else {
        result[authorId].publishedOn = read.dateFinished;
      }
    });

    return result;
  }, {});

  return Object.entries(authors).map(([_, props]) => ({
    params: { authorSlug: props.slug },
    props,
  }));
};

const { reads, name, recordId: authorId, publishedOn, updatedOn } = Astro.props;
const numUniqueBooks = new Set(reads.map((r) => r.book.gbid)).size;
---

<Layout
  pageTitle={`${name} - Books`}
  pageDescription={`David's reviewed reviews books by ${name}.`}
  seoTitle={seoTitle(`Books by ${name}`)}
  seoDescription={`There's an average score of ${averageRating(
    reads,
  )}⭐ for the ${numUniqueBooks} ${pluralize(
    numUniqueBooks,
    "book",
  )} he's read by ${name}.`}
  activeTab="books"
  publishedOn={publishedOn}
  updatedOn={updatedOn}
>
  <PageTitle>
    Reviews for <RoundedText text={name} />
  </PageTitle>
  <p class="pb-3">
    There {pluralize(reads, "is", "are", true)}
    {reads.length}
    {pluralize(reads, "review")} of {numUniqueBooks}
    {pluralize(numUniqueBooks, "book")} with an average score of {
      averageRating(reads)
    } (<OmniLink href={ratingPage("books")}>
      {"out of 4"}
    </OmniLink>).
  </p>
  <BookLegend />
  <div>
    {reads.map((read) => <ReadBox read={read} omitAuthorIds={[authorId]} />)}
  </div>
  <SubscribeBlurb centered mediaType="book" />
</Layout>
