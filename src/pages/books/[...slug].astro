---
import { loadReads, type Read } from "../../airtable/data/reads";
import BookLegend from "../../components/BookLegend.astro";
import ButtonGroup from "../../components/ButtonGroup.astro";
import PageTitle from "../../components/PageTitle.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import ReadBox from "../../components/infoboxes/ReadBox.astro";
import RoundedLink from "../../components/links/RoundedLink.astro";
import Layout from "../../layouts/Layout.astro";
import { seoTitle } from "../../utils/data";

type Subpaths = "awarded" | "all" | "recommended" | "recent" | "unrecommended";
type WatchFilter = (read: Read) => boolean;
const DEFAULT_FILTER: WatchFilter = () => true;

// this controls the /books and /books/... routes
type Result = Array<{ params: { slug: Subpaths | undefined } }>;
export const getStaticPaths = (): Result =>
  (
    [undefined, "all", "awarded", "recommended", "unrecommended"] as Subpaths[]
  ).map((slug: Subpaths | undefined) => ({
    params: { slug },
  }));

const subPages: Array<{
  buttonLabel: string;
  pageTitle: string;
  tabTitle: string;
  limit?: number;
  filter?: WatchFilter;
  subpath: Subpaths | null;
  introText?: `${string}.` | `${string}!`;
}> = [
  {
    subpath: "all",
    buttonLabel: "All",
    tabTitle: "All Reviews",
    pageTitle: "Every Reviewed Book",
  },
  {
    subpath: null,
    buttonLabel: "Recent",
    pageTitle: "Recently Reviewed Books",
    tabTitle: "Recent Books",
    limit: 100,
    introText: "Showing the 100 most recent reviews.",
  },
  {
    subpath: "awarded",
    buttonLabel: "🥇🥈🥉",
    tabTitle: "Awarded Books",
    pageTitle: "Every Favorite-of-the-Year Honoree",
    introText:
      "Showing reviews of books that were one of my favorite things I watched that year.",
    filter: (read) => !!read.book.award,
  },
  {
    subpath: "recommended",
    buttonLabel: "👍",
    tabTitle: "Recommended Books",
    pageTitle: "All Recommended Books",
    introText: "Showing reviews of books that I broadly recommend.",
    filter: (read) => read.rating >= 3,
  },
  {
    subpath: "unrecommended",
    buttonLabel: "👎",
    tabTitle: "Unrecommended Books",
    pageTitle: "All Unrecommended Books",
    introText:
      "Showing reviews of books you should avoid unless you're a big fan of the genre.",
    filter: (read) => read.rating < 3,
  },
];

const slug = Astro.params.slug ?? null;

const {
  filter = DEFAULT_FILTER,
  limit = undefined,
  pageTitle,
  tabTitle = "",
  introText,
} = subPages.find(({ subpath: subpageSlug }) => subpageSlug === slug) ?? {};
if (!pageTitle) {
  throw new Error(`Unable to find page details for slug "${slug}"`);
}

const reads = await loadReads();
const filteredReads = reads.filter(filter).slice(0, limit);

const numUniqueBooks = new Set(reads.map((r) => r.book.gbid)).size;
---

<Layout
  pageTitle={tabTitle}
  pageDescription={limit === undefined
    ? `Detailed reviews of recent reads.`
    : `All ${reads.length} book reviews.`}
  seoTitle={seoTitle(`Books!`)}
  activeTab="books"
>
  <PageTitle>{pageTitle}</PageTitle>

  <p class="pb-3">
    {
      slug === "all"
        ? `Showing every single review (${reads.length} reviews for ${numUniqueBooks} books).`
        : introText
    } You can also see lists of:
  </p>
  <ul class="list-disc pl-8">
    <li class="pb-3">
      <RoundedLink href="/books/series/">all series</RoundedLink>
    </li>
    <li class="pb-3">
      <RoundedLink href="/books/authors/">all authors</RoundedLink>
    </li>
  </ul>

  <SubscribeBlurb mediaType="book" />

  <ButtonGroup
    pathRoot="books"
    currentSubpath={slug ?? null}
    buttons={subPages.map(({ buttonLabel: label, subpath }) => ({
      subpath,
      label,
    }))}
  />

  <BookLegend />
  <div>
    {filteredReads.map((read) => <ReadBox read={read} />)}
  </div>
</Layout>
