---
import { loadReads, type Read } from "../../../airtable/data/reads";
import type { Series } from "../../../airtable/data/series";
import AuthorList from "../../../components/AuthorList.astro";
import BookLegend from "../../../components/BookLegend.astro";
import ReadBox from "../../../components/infoboxes/ReadBox.astro";
import ExternalLink from "../../../components/links/ExternalLink.astro";
import PageTitle from "../../../components/PageTitle.astro";
import Rating from "../../../components/Rating.astro";
import RoundedText from "../../../components/RoundedText.astro";
import Layout from "../../../layouts/Layout.astro";
import { averageRating, pluralize, seoTitle } from "../../../utils/data";

type Params = {
  seriesSlug: string;
};

type Props = Series & {
  reads: Read[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const reads = await loadReads();

  const series = reads.reduce<Record<string, Props>>((result, read) => {
    const series = read.book.series;
    if (series) {
      const seriesSlug = series.slug;

      result[seriesSlug] ||= {
        ...series,
        reads: [],
      };

      result[seriesSlug].reads.push(read);
    }
    return result;
  }, {});

  return Object.entries(series).map(([_, props]) => ({
    params: { seriesSlug: props.slug },
    props,
  }));
};

const { reads, name, numBooksInSeries, remarks, percentComplete } = Astro.props;
const seriesComplete = (numBooksInSeries ?? 0) > 0;
const readAll = percentComplete === 100;
const numUniqueBooks = new Set(reads.map((r) => r.book.gbid)).size;
---

<Layout
  pageTitle={`${name} Series - Books`}
  seoTitle={seoTitle(`The ${name} Series`)}
  seoDescription={`David shares thoughts about the ${numUniqueBooks} book${
    numUniqueBooks > 1 ? "s" : ""
  } he's read from the ${name} series.`}
  activeTab="books"
>
  <PageTitle>
    Reviews for Books in The <RoundedText text={name} /> series
  </PageTitle>
  <p class="py-3">
    {/* all series are by a single set of authors, for now */}
     by <AuthorList authors={reads[0].book.authors} style="rounded" />
  </p>
  <p class="pb-3 pt-2">
    {
      seriesComplete ? (
        <>
          I've read {readAll ? "all" : numUniqueBooks} of the {numBooksInSeries}
          book{pluralize(numUniqueBooks)} in this series.
        </>
      ) : (
        <>
          I've read {numUniqueBooks} book{pluralize(numUniqueBooks)} in this
          series so far.
        </>
      )
    }
     There {reads.length > 1 ? "are" : "is"}{" "}
    {reads.length} review{pluralize(reads)} of {
      numUniqueBooks > 1 ? "those" : "that"
    } book{pluralize(numUniqueBooks)} for an average score of {
      averageRating(reads)
    }
     (<ExternalLink href="https://xavd.id/blog/post/on-the-rating-of-media/">
      {"out of 4"}
    </ExternalLink>).
  </p>
  {
    remarks && (
      <div class="pb-4">
        {/* stack everything inline to get nice star ratings */}
        <p class="inline">
          I rated this series{" "}
          <Rating rating={remarks.rating} classes={["inline"]} /> overall and
          said:
        </p>
        <p class="mt-2 border-s-4 border-emerald-950 pl-4 italic dark:border-emerald-50">
          {remarks.notes}
        </p>
      </div>
    )
  }
  <BookLegend />
  <div>
    {
      reads
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .sort((a, b) => a.book.numberInSeries! - b.book.numberInSeries!)
        .map((read) => (
          <ReadBox
            read={read}
            omitAuthorIds={read.book.authors.map((a) => a.recordId)}
            linkToSeries={false}
          />
        ))
    }
  </div>
</Layout>
