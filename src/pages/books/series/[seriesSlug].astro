---
import slugify from "@sindresorhus/slugify";

import { fields, loadReads, type ReadRecord } from "../../../airtable/reads";
import BookBox from "../../../components/infoboxes/bookbox.astro";
import Layout from "../../../layouts/Layout.astro";
import AuthorList from "../../../components/AuthorList.astro";
import BookLegend from "../../../components/BookLegend.astro";

type Params = {
  seriesSlug: string;
};

type Props = {
  name: string;
  authors: string[];
  reads: ReadRecord[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const rawReviews = await loadReads();

  const series = rawReviews.reduce<{ [seriesSlug: string]: Props }>(
    (result, review) => {
      const seriesName = review[fields.seriesName]?.[0];
      if (seriesName) {
        const seriesSlug = slugify(seriesName);
        const series = result[seriesSlug];

        if (series) {
          series.reads.push(review);
        } else {
          result[seriesSlug] = {
            name: seriesName,
            authors: review[fields.authorFullNames].split(","),
            reads: [review],
          };
        }
      }
      return result;
    },
    {},
  );

  return Object.entries(series).map(([seriesSlug, props]) => ({
    params: { seriesSlug },
    props,
  }));
};

const { reads, name, authors } = Astro.props;
const numUniqueBooks = new Set(reads.map((r) => r[fields.googleBooksId])).size;

// let's assume all books in a series are by the same person for now
// coAuthors={
//   review[fields.authorIds].length
//     ? review[fields.authorFullNames]
//         .split(",")
//         .filter((n) => n != name)
//         .join(", ")
//     : undefined
// }
---

<Layout title={`${name} - Reviews`} active="books">
  <h1 class="pt-2 text-2xl">
    All reviews for The {name} series
  </h1>
  <p class="pb-2">
    by <AuthorList authors={authors} style="rounded" />
  </p>
  <p class="pb-3">
    There are {reads.length} total reviews of {numUniqueBooks} book{
      reads.length > 1 && "s"
    }.
  </p>
  <BookLegend />
  <div>
    {
      reads
        .sort(
          (a, b) => a[fields.numberInSeries]![0] - b[fields.numberInSeries]![0],
        )
        .map((review) => (
          <BookBox
            title={review[fields.title][0]}
            rating={review[fields.rating]}
            dateFinished={review[fields.dateFinished]}
            notes={review[fields.notes]}
            isReread={review[fields.isReread]}
            googleBooksId={review[fields.googleBooksId]![0]}
            awardTier={review[fields.awardTier]?.[0]}
            bookMedium={review[fields.medium]}
            series={
              review[fields.seriesName]?.[0]
                ? {
                    name: review[fields.seriesName]![0],
                    number: review[fields.numberInSeries]![0],
                  }
                : undefined
            }
          />
        ))
    }
  </div>
</Layout>
