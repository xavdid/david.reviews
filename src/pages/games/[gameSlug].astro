---
import { Image } from "astro:assets";

import type { Game } from "../../airtable/data/games";
import { isEtcPlay, loadPlays, type Play } from "../../airtable/data/plays";
import AwardBlurb from "../../components/AwardBlurb.astro";
import PlaySummary from "../../components/infoboxes/PlaySummary.astro";
import ExternalLink from "../../components/links/ExternalLink.astro";
import RoundedLink from "../../components/links/RoundedLink.astro";
import Layout from "../../layouts/Layout.astro";
import {
  averageRating,
  pluralize,
  seoTitle,
  isProdBuild,
} from "../../utils/data";
import {
  getPublishedArticles,
  type ArticleReference,
} from "../../utils/content";
import SubtleLink from "../../components/links/SubtleLink.astro";
import SteamFollowButton from "../../components/SteamFollowButton.astro";

type Params = {
  gameSlug: string;
};
type Props = {
  game: Game;
  // first time, replay; used for headline info
  plays: Play[];
  // dlc, etc
  etcPlays: Play[];
  articles: ArticleReference[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const allArticles = await getPublishedArticles();

  const newProps = (game: Game): Props => ({
    game,
    plays: [],
    etcPlays: [],
    articles: allArticles
      .filter((articles) => articles.data.gameSlugs?.includes(game.slug))
      .map(({ data: { title }, permalink }) => ({
        title,
        permalink,
      })),
  });
  const plays = await loadPlays();

  // could pre-calculate all the articles for lookup, but this won't be a performance issue for a while
  // const articlesByGame = allArticles.reduce<Record<string, ArticleReference[]>>(
  //   (result, { data: { title, gameSlugs }, permalink }) => {
  //     gameSlugs?.forEach((gameSlug) => {
  //       result[gameSlug] ||= [];
  //       result[gameSlug].push({ title, permalink });
  //     });
  //     return result;
  //   },
  //   {},
  // );

  const games = plays.reduce<Record<string, Props>>((result, play) => {
    const igdbId = play.game.igdbId;
    // TS doesn't check this right if I put the object inline? so it's a func call
    const gameRecord = result[igdbId] ?? newProps(play.game);

    (isEtcPlay(play.playType) ? gameRecord.etcPlays : gameRecord.plays).push(
      play,
    );
    result[igdbId] = gameRecord;

    return result;
  }, {});

  // for prod builds, ensure every game slug exists
  // older games won't be preset in dev
  if (isProdBuild) {
    const allGameSlugs = new Set(
      Object.values(games).map(({ game: { slug } }) => slug),
    );
    allArticles.forEach(({ data: { gameSlugs, title } }) => {
      gameSlugs?.forEach((gameSlug) => {
        if (!allGameSlugs.has(gameSlug)) {
          throw new Error(
            `article "${title} has a game slug "${gameSlug}" that's not found in any games`,
          );
        }
      });
    });
  }

  return Object.entries(games).map(([_, props]) => ({
    params: { gameSlug: props.game.slug },
    props,
  }));
};

const {
  plays,
  etcPlays,
  game: { title, posterUrl, award, genre, bigPosterUrl, collection },
  articles,
} = Astro.props;
---

<Layout
  pageTitle={`${title} - Games`}
  seoTitle={seoTitle(title)}
  seoDescription={`David shares thoughts about the ${plays.length} time${
    plays.length > 1 ? "s" : ""
  } he's played the ${genre.name} game ${title}.`}
  activeTab="games"
  ogImg={{
    url: bigPosterUrl,
    // this is the size, idk
    height: 724,
    width: 528,
    type: "jpeg",
  }}
>
  <div class="flex py-3">
    <Image
      src={posterUrl}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl underline">{title}</h1>
      <p class="pt-2">
        Genre: <RoundedLink href={genre.permalink}>
          {genre.name}
        </RoundedLink>
      </p>
      <p class="pr-2 pt-2">
        I've played the main story {plays.length} time{pluralize(plays)}
         and given it an average score of {averageRating(plays)} (<ExternalLink
          href="https://xavd.id/blog/post/on-the-rating-of-media/"
        >
          {"out of 4"}
        </ExternalLink>).
      </p>
      {
        award && (
          <div class="pt-2">
            <AwardBlurb {...award} category="game" />
          </div>
        )
      }
      {
        collection && (
          <div class="pt-2">
            <p>
              This game is part of the{" "}
              <RoundedLink href={collection.permalink}>
                {collection.fullName}
              </RoundedLink>{" "}
              collection.
            </p>
          </div>
        )
      }
    </div>
  </div>
  {
    articles.length ? (
      <div class="pb-4">
        <h2 class="pb-0 text-xl">Mentioned In</h2>
        <ul class="list-disc pl-8">
          {articles.map(({ permalink, title }) => (
            <li class="py-1">
              <SubtleLink href={permalink} classes={["text-lg"]}>
                {title}
              </SubtleLink>
            </li>
          ))}
        </ul>
      </div>
    ) : null
  }
  <div>
    {articles.length ? <h2 class="pb-2 text-xl">Full Plays</h2> : null}
    {plays.map((play) => <PlaySummary play={play} />)}
  </div>
  {
    etcPlays.length > 0 && (
      <>
        <h2 class="pb-0 text-xl">DLC, etc.</h2>
        <div class="pt-2">
          {etcPlays.map((play) => (
            <PlaySummary play={play} />
          ))}
        </div>
      </>
    )
  }

  <p class="py-1">
    To see reviews like this directly in your Steam UI, you can:
  </p>

  <SteamFollowButton />
</Layout>
