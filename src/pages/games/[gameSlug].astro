---
import { Image } from "astro:assets";

import type { Game } from "../../airtable/data/games";
import { loadInProgessPlays } from "../../airtable/data/inProgressPlays";
import { isEtcPlay, loadPlays, type Play } from "../../airtable/data/plays";
import DekuDealsIcon from "../../components/icons/deku-deals.astro";
import SteamIcon from "../../components/icons/steam.astro";
import PlaySummary from "../../components/infoboxes/PlaySummary.astro";
import OmniLink from "../../components/links/OmniLink.astro";
import SubtleLink from "../../components/links/SubtleLink.astro";
import MediaTitle from "../../components/MediaTitle.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import Layout from "../../layouts/Layout.astro";
import {
  getPublishedArticles,
  type ArticleReference,
} from "../../utils/content";
import {
  averageRating,
  buildSeoDescription,
  isProdBuild,
  maxIsoDate,
  pluralize,
  ratingPage,
  seoTitle,
} from "../../utils/data";
import { buildStructuredReview } from "../../utils/structuredData";

type Params = {
  gameSlug: string;
};
type Props = {
  game: Game;
  // first time, replay; used for headline info
  plays: Play[];
  // dlc, etc
  etcPlays: Play[];
  articles: ArticleReference[];
  publishedOn: string;
  updatedOn?: string;
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const buildNewProps = (game: Game): Props => ({
    game,
    plays: [],
    etcPlays: [],
    articles: allArticles
      .filter((articles) =>
        articles.data.mentionedGameSlugs?.includes(game.slug),
      )
      .map(({ data: { title }, permalink }) => ({
        title,
        permalink,
      })),
    publishedOn: "",
  });

  const allArticles = await getPublishedArticles();
  const plays = await loadPlays();

  // could pre-calculate all the articles for lookup, but this won't be a performance issue for a while
  // const articlesByGame = allArticles.reduce<Record<string, ArticleReference[]>>(
  //   (result, { data: { title, gameSlugs }, permalink }) => {
  //     gameSlugs?.forEach((gameSlug) => {
  //       result[gameSlug] ||= [];
  //       result[gameSlug].push({ title, permalink });
  //     });
  //     return result;
  //   },
  //   {},
  // );

  const completedGames = plays.reduce<Record<string, Props>>((result, play) => {
    const igdbId = play.game.igdbId;
    // TS doesn't check this right if I put the object inline? so it's a func call
    const gameRecord = result[igdbId] ?? buildNewProps(play.game);

    (isEtcPlay(play.playType) ? gameRecord.etcPlays : gameRecord.plays).push(
      play,
    );
    if (play.playType === "First Time") {
      gameRecord.publishedOn = play.dateFinished;
    } else {
      // set the updated date to the max of current value and the new one, defaulting to the new one if nothing is set
      gameRecord.updatedOn = maxIsoDate(
        gameRecord.updatedOn,
        play.dateFinished,
      );
    }
    result[igdbId] = gameRecord;

    return result;
  }, {});

  // for prod builds, ensure every game slug exists
  // older games won't be preset in dev (but still get warnings?)
  if (isProdBuild) {
    const allGameSlugs = new Set<string>([
      ...Object.values(completedGames).map(({ game: { slug } }) => slug),
      ...(await loadInProgessPlays()).map(({ game: { slug } }) => slug),
    ]);

    const issues: string[] = [];

    allArticles.forEach(({ data: { mentionedGameSlugs }, slug }) => {
      mentionedGameSlugs?.forEach((gameSlug) => {
        if (!allGameSlugs.has(gameSlug)) {
          issues.push(
            `! article "${slug}" has a game slug "${gameSlug}" that's not found in any games`,
          );
        }
      });
    });

    if (issues.length) {
      issues.forEach((i) => {
        console.error(i);
      });
      throw new Error("Some articles don't correctly point to games");
    }
  }

  return Object.entries(completedGames).map(([_, props]) => ({
    params: { gameSlug: props.game.slug },
    props,
  }));
};

const {
  plays,
  etcPlays,
  game: {
    title,
    posterUrl,
    award,
    genre,
    bigPosterUrl,
    collection,
    steamUrl,
    dekuDealsUrl,
    permalink,
  },
  articles,
  publishedOn,
  updatedOn,
} = Astro.props;

const hasArticleSection = Boolean(articles.length || award);
---

<Layout
  pageTitle={`${title} - Games`}
  pageDescription={`David shares thoughts about the ${plays.length} ${pluralize(
    plays,
    "time",
  )} he's played the ${genre.name} game ${title}.`}
  seoTitle={seoTitle(title)}
  seoDescription={buildSeoDescription(
    [...plays, ...etcPlays].toSorted(
      (a, b) => Date.parse(b.dateFinished) - Date.parse(a.dateFinished),
    ),
    "plays",
  )}
  activeTab="games"
  ogImg={{
    url: bigPosterUrl,
    // this is the size, idk
    height: 724,
    width: 528,
    type: "jpeg",
  }}
  publishedOn={publishedOn}
  updatedOn={updatedOn}
  structuredData={buildStructuredReview("VideoGame", plays, {
    title,
    permalink,
    poster: bigPosterUrl,
  })}
>
  <div class="flex py-3">
    <Image
      src={posterUrl}
      alt={`poster for ${title}`}
      height={240}
      width={180}
      class="h-fit"
    />
    <div class="pl-3">
      <MediaTitle>{title}</MediaTitle>
      <p class="pt-2">
        Genre: <OmniLink href={genre.permalink}>
          {genre.name}
        </OmniLink>
      </p>
      <p class="pr-2 pt-2">
        I've played the main story {plays.length}
        {pluralize(plays, "time")} and given it an average score of {
          averageRating(plays)
        } (<OmniLink href={`${ratingPage("games")}`}>
          {"out of 4"}
        </OmniLink>).
      </p>
      {
        steamUrl && (
          <div class="pt-2">
            <SteamIcon />
            <OmniLink href={steamUrl}>Steam</OmniLink>
          </div>
        )
      }
      {
        dekuDealsUrl && (
          <div class="pt-1">
            <DekuDealsIcon />
            <OmniLink href={dekuDealsUrl}>Deku Deals</OmniLink>
          </div>
        )
      }
      {
        collection && (
          <div class="pt-2">
            <p>
              This game is part of the{" "}
              <OmniLink href={collection.permalink}>
                {collection.fullName}
              </OmniLink>{" "}
              collection.
            </p>
          </div>
        )
      }
    </div>
  </div>
  {
    hasArticleSection ? (
      <div class="pb-4">
        <h2 class="pb-0 text-xl">Mentioned In</h2>
        <ul class="list-disc pl-8">
          {award && (
            <li class="py-1">
              <SubtleLink external href={award.url} classes={["text-lg"]}>
                Favorite Media of {award.year}
              </SubtleLink>{" "}
              ({award.emoji}
              {award.tier} medal winner)
            </li>
          )}
          {articles.map(({ permalink, title }) => (
            <li class="py-1">
              <SubtleLink href={permalink} classes={["text-lg"]}>
                {title}
              </SubtleLink>
            </li>
          ))}
        </ul>
      </div>
    ) : null
  }
  <div>
    {hasArticleSection ? <h2 class="pb-2 text-xl">Full Plays</h2> : null}
    {plays.map((play) => <PlaySummary play={play} />)}
  </div>
  {
    etcPlays.length > 0 && (
      <>
        <h2 class="pb-0 text-xl">DLC, etc.</h2>
        <div class="pt-2">
          {etcPlays.map((play) => (
            <PlaySummary play={play} />
          ))}
        </div>
      </>
    )
  }

  <SubscribeBlurb
    blurb="If you liked this review and want to read more like it, subscribe via"
    showSteamButton
    centered
  />
</Layout>
