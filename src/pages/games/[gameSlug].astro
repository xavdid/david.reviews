---
import { Image } from "astro:assets";

import type { Game } from "../../airtable/data/games";
import AwardBlurb from "../../components/AwardBlurb.astro";
import Rating from "../../components/Rating.astro";
import Layout from "../../layouts/Layout.astro";
import { minutesToDuration } from "../../utils";
import ExternalLink from "../../components/links/ExternalLink.astro";
import { loadPlays, type Play } from "../../airtable/data/plays";
import RoundedLink from "../../components/links/RoundedLink.astro";

type Params = {
  gameSlug: string;
};

type Props = {
  game: Game;
  plays: Play[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const watches = await loadPlays();

  const movies = watches.reduce<Record<string, Props>>((result, play) => {
    const igdbId = play.game.igdbId;
    const gameRecord = result[igdbId] as Props | undefined;

    if (gameRecord) {
      gameRecord.plays.push(play);
    } else {
      const item: Props = {
        game: play.game,
        plays: [play],
      };
      result[igdbId] = item;
    }

    return result;
  }, {});

  return Object.entries(movies).map(([_, props]) => ({
    params: { gameSlug: props.game.slug },
    props,
  }));
};

const {
  plays,
  game: { title, posterUrl, award, genre },
} = Astro.props;
---

<Layout title={title} active="games">
  <div class="flex py-3">
    <Image
      src={posterUrl}
      alt={`poster for ${title}`}
      height={450 / 2}
      width={300 / 2}
      class="max-h-[225px] max-w-[150px]"
    />
    <div class="pl-3">
      <h1 class="pt-2 text-2xl">{title}</h1>
      <p class="pt-2">
        I've categorized this as a <RoundedLink href="TKTK">
          {genre}
        </RoundedLink> game.
      </p>
      <p class="pr-2 pt-2">
        I've played this game {plays.length} time{plays.length > 1 && "s"} and
        given it an average score of {
          plays.reduce((total, { rating }) => rating + total, 0) / plays.length
        } (<ExternalLink
          href="https://xavd.id/blog/post/on-the-rating-of-media/"
        >
          {"out of 4"}
        </ExternalLink>).
      </p>
      {award && <AwardBlurb {...award} />}
    </div>
  </div>
  <div>
    {
      plays.map(({ rating, notes, playType, minutesPlayed, dateFinished }) => {
        return (
          <div class="mb-4 rounded border-2 border-blue-500 even:bg-blue-50">
            <div class="flex justify-between border-b-2 border-blue-500 px-2">
              <span>{dateFinished}</span>
              <span>{minutesToDuration(minutesPlayed)}</span>
              <span>{playType}</span>
              <div>
                <Rating rating={rating} />
              </div>
            </div>
            <p class="p-2">{notes || <em>no review</em>}</p>
          </div>
        );
      })
    }
  </div>
</Layout>
