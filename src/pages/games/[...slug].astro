---
import { isEtcPlay, loadPlays, type Play } from "../../airtable/data/plays";
import ButtonGroup from "../../components/ButtonGroup.astro";
import SubscribeBlurb from "../../components/SubscribeBlurb.astro";
import PlayBox from "../../components/infoboxes/PlayBox.astro";
import ExternalLink from "../../components/links/ExternalLink.astro";
import RoundedLink from "../../components/links/RoundedLink.astro";
import Layout from "../../layouts/Layout.astro";
import { genrePermalink, seoTitle } from "../../utils";

type Subpaths = "awarded" | "all" | "recommended" | "recent" | "unrecommended";
type PlayFilter = (p: Play) => boolean;
const DEFAULT_FILTER: PlayFilter = () => true;

// this controls the /games and /games/... routes
type Result = Array<{ params: { slug: Subpaths | undefined } }>;
export const getStaticPaths = (): Result =>
  (
    [undefined, "all", "awarded", "recommended", "unrecommended"] as Subpaths[]
  ).map((slug: Subpaths | undefined) => ({
    params: { slug },
  }));
const subPages: Array<{
  buttonLabel: string;
  pageTitle: string;
  tabTitle: string;
  limit?: number;
  filter?: PlayFilter;
  subpath: Subpaths | null;
  introText?: `${string}.` | `${string}!`;
}> = [
  {
    subpath: "all",
    buttonLabel: "All",
    tabTitle: "All Reviews",
    pageTitle: "Every Reviewed Game",
  },
  {
    subpath: null,
    buttonLabel: "Recent",
    pageTitle: "Recently Reviewed Games",
    tabTitle: "Recent Games",
    limit: 100,
    introText: "Showing the 100 most recent reviews.",
  },
  {
    subpath: "awarded",
    buttonLabel: "🥇🥈🥉",
    tabTitle: "Awarded Games",
    pageTitle: "Every Favorite-of-the-Year Honoree",
    introText:
      "Showing reviews of games that were one of my favorite things I played that year. The cream of the crop!",
    filter: (p) => !!p.game.award && !isEtcPlay(p.playType),
  },
  {
    subpath: "recommended",
    buttonLabel: "👍",
    tabTitle: "Recommended Games",
    pageTitle: "All Recommended Games",
    introText:
      "Showing reviews of games that I broadly recommend (rated 3+ stars). Games at the bottom of the list may not have notes.",
    filter: (p) => p.rating >= 3,
  },
  {
    subpath: "unrecommended",
    buttonLabel: "👎",
    tabTitle: "Unrecommended Games",
    pageTitle: "All Unrecommended Games",
    introText:
      "Showing reviews of games you should avoid unless you're a big fan of the genre (anything rated 1 or 2 stars). There aren't that many of these, since I mostly play things I like.",
    filter: (p) => p.rating < 3,
  },
];

if (getStaticPaths().length !== subPages.length) {
  throw new Error("Subpage without a matching static path!");
}

const slug = Astro.params.slug ?? null;

const {
  filter = DEFAULT_FILTER,
  limit = undefined,
  pageTitle,
  tabTitle = "",
  introText,
} = subPages.find(({ subpath: subpageSlug }) => subpageSlug === slug) ?? {};
if (!pageTitle) {
  throw new Error(`Unable to find page details for slug "${slug}"`);
}

const plays = await loadPlays();
const filteredPlays = plays.filter(filter).slice(0, limit);
const numUniqueGames = new Set(filteredPlays.map((p) => p.game.igdbId)).size;

// const collectionEmoji = new Set<string>(
//   plays
//     .map((p) => p.game.collection?.map((c) => c.emoji))
//     .flat()
//     .filter(Boolean) as string[],
// );
---

<Layout
  pageTitle={tabTitle}
  seoTitle={seoTitle(`Games!`)}
  seoDescription={`David shares thoughts about the ${numUniqueGames} games he's played.`}
  activeTab="games"
>
  <h1 class="pb-3 pt-2 text-2xl">{pageTitle}</h1>
  <p class="pb-3">
    {
      slug === "all"
        ? `Showing every single review (${filteredPlays.length} reviews for ${numUniqueGames} games).`
        : introText
    }
  </p>
   Each game notes its:
  <ul class="list-disc pb-3 pl-8">
    <li class="py-1">Play type (first time, replays, DLC, etc)</li>
    <li class="py-1">
      <RoundedLink href={genrePermalink("")}>
        {"genre"}
      </RoundedLink>, and you can click through to see all the others games from
      that genre I've played.
    </li>
  </ul>
  <SubscribeBlurb mediaType="game" />

  <ButtonGroup
    pathRoot="games"
    currentSubpath={slug ?? null}
    buttons={subPages.map(({ buttonLabel: label, subpath }) => ({
      subpath,
      label,
    }))}
  />

  <ul
    class="mb-4 rounded bg-blue-50 p-2 dark:bg-blue-950 dark:ring-1 dark:ring-white"
  >
    <li>🛑 - Neglected to finish a beatable game</li>
    <li>
      🥇 / 🥈 / 🥉 -
      <ExternalLink href="https://xavd.id/blog/tags/yearly-review">
        {"Favorite of the Year"}
      </ExternalLink> honoree.
    </li>
  </ul>

  <div>
    {filteredPlays.map((play) => <PlayBox play={play} />)}
  </div>
</Layout>
