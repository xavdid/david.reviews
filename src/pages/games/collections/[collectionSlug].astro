---
import {
  COLLECTION_DESCRIPTIONS,
  type Game,
} from "../../../airtable/data/games";
import { isEtcPlay, loadPlays, type Play } from "../../../airtable/data/plays";
import type { Collection } from "../../../airtable/types";
import PageTitle from "../../../components/PageTitle.astro";
import RoundedText from "../../../components/RoundedText.astro";
import Layout from "../../../layouts/Layout.astro";
import {
  averageRating,
  collectionPermalink,
  ratingPage,
  seoTitle,
} from "../../../utils/data";
import OmniLink from "../../../components/links/OmniLink.astro";
import SlimBox from "../../../components/infoboxes/SlimBox.astro";

type Params = {
  collectionSlug: string;
};

type GameAndPlays = {
  game: Game;
  plays: Play[];
};
type Props = {
  collection: Collection;
  games: GameAndPlays[];
};

// own row for weird export reasons
type Result = Promise<Array<{ params: Params; props: Props }>>;
export const getStaticPaths = async (): Result => {
  const plays = await loadPlays();

  const games = plays
    .filter((p) => !isEtcPlay(p.playType))
    .reduce<Record<string, GameAndPlays>>((result, play) => {
      if (play.game.collection) {
        const igdbId = play.game.igdbId;

        result[igdbId] ||= {
          game: play.game,
          plays: [],
        };
        result[igdbId].plays.push(play);
      }

      return result;
    }, {});

  const collections = Object.values(games).reduce<Record<string, Props>>(
    (result, gameWithPlays) => {
      const collection = gameWithPlays.game.collection;
      if (collection) {
        result[collection.slug] ||= {
          collection,
          games: [],
        };

        result[collection.slug].games.push(gameWithPlays);
      }
      return result;
    },
    {},
  );

  return Object.entries(collections).map(([collectionSlug, props]) => ({
    params: { collectionSlug },
    props,
  }));
};

const { games, collection } = Astro.props;
const sortedGames = games
  .map(({ game: { permalink, title, posterUrl, award }, plays }) => {
    // i'm going to show info about the most relevant play, which is probably the one I had the most to say about
    const bestPlay = plays.reduce((result, item) =>
      result.notes.length > item.notes.length ? result : item,
    );
    return {
      title,
      avgRating: averageRating(plays),
      permalink,
      posterUrl,
      // the longest review is probably the best one?
      blurb: bestPlay.notes,
      award,
    };
  })
  .toSorted(
    (a, b) => b.avgRating - a.avgRating || (a.title > b.title ? 1 : -1),
  );
---

<Layout
  pageTitle={`${collection.fullName} Games`}
  pageDescription={`${games.length} great ${collection.fullName} to enjoy with your friends and loved ones.`}
  seoTitle={seoTitle(`${collection.fullName} Games`)}
  activeTab="games"
>
  <div class="py-3">
    <PageTitle>
      Favorite <RoundedText text={collection.fullName} />
       Games
    </PageTitle>
    <p class="pb-1 pt-2">
      Gaming is better with a partner, but it can be hard to pick something that
      everyone is excited about. Luckily, I have just the things.
    </p>
    <p class="py-1">
      The {games.length} games below are "{collection.slug}", meaning <strong
        >{
          COLLECTION_DESCRIPTIONS[collection.slug] ?? "MISSING DESCRIPTION"
        }</strong
      >
    </p>
    <p class="py-1">
      Each game is scored on my <OmniLink href={ratingPage("games")}>
        {"4-point rating system"}
      </OmniLink>. Please <OmniLink href="/contact/">
        {"let me know"}
      </OmniLink> if you'd like to nominate an addition!
    </p>

    <p class="py-2">
      ⬅️ Or, head back to <OmniLink href={collectionPermalink("games", "")}>
        {"All Collections"}
      </OmniLink>
    </p>
  </div>
  <div>
    {sortedGames.map((game) => <SlimBox {...game} mediaType="games" />)}
  </div>
</Layout>
